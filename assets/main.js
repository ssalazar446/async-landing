/*
üìÄ ùóñùóπùóÆùòÄùó≤ #ùü≠ùü¥: ùóñùóºùóªùòÄùòÇùó∫ùó∂ùó≤ùóªùó±ùóº ùóîùó£ùóú ùü≠ùü¥/ùüÆùü≠ üìÄ
.
üîß Continuando con la l√≥gica de la landing:
.

Entra a https://rapidapi.com/ y creamos una cuenta al dar click en Sign Up y seguir los pasos.
El profesor usar√° la API de youtube, as√≠ que en el buscador puedes colocar la API que quieras usar. La versi√≥n de la API de youtube que vamos a usar es YouTube V3.
Una vez seleccionada la API, nos mostrar√° 3 columnas con los servicios y herramientas que est√°n disponibles para la API, para el ejemplo se selecciona Channel Videos para obtener los √∫ltimos v√≠deos publicados. En la columna central, se debe indicar la id del canal que queremos mostrar en la landing, √©ste se obtiene en la url de youtube despu√©s de channel/, por ejemplo para el canal de youtube del profesor: https://www.youtube.com/channel/UC9k0tTsh_qStx0HPuPftSsg el id del canal es UC9k0tTsh_qStx0HPuPftSsg ese es el que se debe pegar en el par√°metro channeld.
M√°s abajo, se puede configurar el m√°ximo de v√≠deos que se desea obtener (m√°ximo hasta 50), para el ejemplo se coloc√≥ 9.
En la tercera columna, se selecciona en la lista el lenguaje de programaci√≥n y el m√©todo que se quiere usar, en este caso: JavaScript ‚Üí fetch con √©sto aparecer√° la plantilla del c√≥digo.
Para visualizar la salida al testear la plantilla, en la columna del medio al dar click en Test Endpoint, la pesta√±a Results se activa y podemos conocer cada uno de los elementos de los objetos, esa informaci√≥n nos ser√° √∫til para nuestro el c√≥digo.
Copiar la plantilla e ir al editor VSC en la ruta src/assets y pegarlo en main.js
La url que se pasa por argumento a la funci√≥n fetch, la cambiamos al inicio del c√≥digo para declarar la constante API:

*/
const API='https://youtube-v31.p.rapidapi.com/search?channelId=UCw05fUBPwmpu-ehXFMqfdMw&part=snippet%2Cid&order=date&maxResults=9';

const content=null||document.getElementById('content');

//La variable options si la dejamos igual, tal cual como lo muestra rapidapi:
const options = {
	method: 'GET',
	headers: {
		'X-RapidAPI-Key': '3a52b059cemsh579f29422123952p1f2a38jsn2f5856fbe6ce',
		'X-RapidAPI-Host': 'youtube-v31.p.rapidapi.com'
	}
};


/* 
Como vamos a usar el asyn/await, borramos el c√≥digo de fetch 
estructurado con then y catch. En lugar de ello, usamos 
la l√≥gica que hicimos en ejemplos anteriores:
*/
//L√≥gica de async: ir por los datos, luego esperar por ellos y finalmente retornarlos hacia el usuario
async function fetchData(urlApi) { //siempre async antes de function
    const response = await fetch(urlApi, options); //hacemos uso del fetch() y solo por esta vez le pasamos la opciones 
    const data = await response.json(); //estructura de los datos transformandolos en json
    return data; //retorna la informaci√≥n de la API que estamos solicitando
    }


    /*
    Ahora vamos usar un nuevo concepto: una funci√≥n que se 
    invoca a s√≠ misma; con JavaScript podemos tener funciones 
    an√≥nimas que permitan llamarse autom√°ticamente, 
    la estructura cuenta con la palabra reservada 
    **async **y con funciones arrows:

    (async () => {
    //Dentro implementamos la l√≥gica necesaria para hacer el llamado a la 
    API, obtener los elementos y mostrarlos en html
    //Se implementa try y catch
    try{
    } catch {
    }
    })();


    Dentro de try{} estar√° el llamado de la API y el 
    template de html para interpretar los datos a iterar por 
    cada objeto, en este caso, cuando analizamos la salida de la 
    API en rapidapi, hay una jerarqu√≠a de los datos, est√°n los 9 
    ‚Äúitems‚Äù del 0 al 8 para la posici√≥n de cada v√≠deo, luego el 
    ‚Äúsnippet‚Äù de cada item, luego ‚Äúthumbnails‚Äù y √©ste a su vez los 
    tama√±os de la imagen (nos interesa con la m√°s alta resoluci√≥n ‚Äúhigh‚Äù), 
    tambi√©n nos interesa mostrar la descripci√≥n ‚Äúdescription‚Äù y 
    nombre ‚Äútitle‚Äù de cada v√≠deo:

    */

    (async()=>{try{const videos=await fetchData(API);let view=`
    ${videos.items.map(video=>`
    <div class="group relative">
        <div
            class="w-full bg-gray-200 aspect-w-1 aspect-h-1 rounded-md overflow-hidden group-hover:opacity-75 lg:aspect-none">
            <img src="${video.snippet.thumbnails.high.url}" alt="${video.snippet.description}" class="w-full">
        </div>
        <div class="mt-4 flex justify-between">
            <h3 class="text-sm text-gray-700">
                <span aria-hidden="true" class="absolute inset-0"></span>
                ${video.snippet.title}
            </h3>
        </div>
    </div>
    `).slice(0,4).join('')}
    `;
            //innerHTML es igual a la vista que se ha creado e 
            //itera con el metodo map y devuelve un nuevo arreglo 
            //con los elementos que queremos obtener como el t√≠tulo, 
            //la descripci√≥n, la imagen miniatura de la API
            content.innerHTML = view; 
        } catch (error) {
            console.log(error);
        }
    })();


    /*
    Si quieres saber m√°s del m√©todo map, en el enlace hay ejemplos: https://www.freecodecamp.org/espanol/news/javascript-map-como-utilizar-la-funcion-js-map-metodo-de-arreglo/#:~:text=La%20sintaxis%20del%20m√©todo%20map,y%20el%20objeto%20array%20completo.
    Para el m√©todo slice: https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/slice
    Para el m√©todo join: https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/join
    En index.html buscamos el comentario de 
    <!-- content --> para agregar el id de **++content ++**y pueda mostrar 
    los v√≠deos en la landing, para ello, borramos el div despu√©s del comentario, 
    incluyendo su contenido, queda as√≠:

    <div class="mt-6 grid grid-cols-1 gap-y-10 gap-x-6 sm:grid-cols-2 lg:grid-cols-4 xl:gap-x-8" id="content">
    <!-- content -->
    </div>

    Y ahora para que pueda leer la l√≥gica de main, dado que el id lo llamamos content, 
    en el archivo main agregamos la referencia content:

    const content = null || document.getElementById('content');
    */